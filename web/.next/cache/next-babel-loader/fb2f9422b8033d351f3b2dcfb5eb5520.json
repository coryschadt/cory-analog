{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/coryschadt/Documents/cory-analog/web/pages/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      *[_type == \\\"post\\\" && publishedAt < now()]|order(publishedAt desc)\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// index.js\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport imageUrlBuilder from '@sanity/image-url';\nimport groq from 'groq';\nimport client from '../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nvar Index = function Index(props) {\n  _s();\n\n  var _props$posts = props.posts,\n      posts = _props$posts === void 0 ? [] : _props$posts;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PLaying with next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick(ev) {\n        return setOpen(!open);\n      },\n      children: \"click me, I am a useState hook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, _this), open && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Looks liek I can do normal stuff here..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, _this), posts.map(function (_ref) {\n      var _id = _ref._id,\n          _ref$title = _ref.title,\n          title = _ref$title === void 0 ? '' : _ref$title,\n          _ref$slug = _ref.slug,\n          slug = _ref$slug === void 0 ? '' : _ref$slug,\n          _ref$_updatedAt = _ref._updatedAt,\n          _updatedAt = _ref$_updatedAt === void 0 ? '' : _ref$_updatedAt,\n          mainImage = _ref.mainImage;\n\n      return slug && /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: urlFor(mainImage).width(200).url()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/post/[slug]\",\n          as: \"/post/\".concat(slug.current),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, _this), ' ', \"(\", new Date(_updatedAt).toDateString(), \")\"]\n      }, _id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Index, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return client.fetch(groq(_templateObject()));\n\n        case 2:\n          _context.t0 = _context.sent;\n          return _context.abrupt(\"return\", {\n            posts: _context.t0\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/coryschadt/Documents/cory-analog/web/pages/index.js"],"names":["useState","Link","imageUrlBuilder","groq","client","urlFor","source","image","Index","props","posts","open","setOpen","ev","map","_id","title","slug","_updatedAt","mainImage","width","url","current","Date","toDateString","getInitialProps","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAAA;;AAAA,qBACAA,KADA,CACfC,KADe;AAAA,MACfA,KADe,6BACP,EADO;;AAAA,kBAECV,QAAQ,CAAC,KAAD,CAFT;AAAA,MAEhBW,IAFgB;AAAA,MAEVC,OAFU;;AAGvB,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAGE;AAAQ,MAAA,OAAO,EAAE,iBAAAC,EAAE;AAAA,eAAID,OAAO,CAAC,CAACD,IAAF,CAAX;AAAA,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,EAIGA,IAAI,iBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,EASGD,KAAK,CAACI,GAAN,CACC;AAAA,UAAGC,GAAH,QAAGA,GAAH;AAAA,4BAAQC,KAAR;AAAA,UAAQA,KAAR,2BAAgB,EAAhB;AAAA,2BAAoBC,IAApB;AAAA,UAAoBA,IAApB,0BAA2B,EAA3B;AAAA,iCAA+BC,UAA/B;AAAA,UAA+BA,UAA/B,gCAA4C,EAA5C;AAAA,UAAgDC,SAAhD,QAAgDA,SAAhD;;AAAA,aACEF,IAAI,iBACF;AAAA,gCAEE;AACE,UAAA,GAAG,EAAEZ,MAAM,CAACc,SAAD,CAAN,CACFC,KADE,CACI,GADJ,EAEFC,GAFE;AADP;AAAA;AAAA;AAAA;AAAA,iBAFF,eAOE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,cAAX;AAA0B,UAAA,EAAE,kBAAWJ,IAAI,CAACK,OAAhB,CAA5B;AAAA,iCACE;AAAA,sBAAIN;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,iBAPF,EAUU,GAVV,OAWM,IAAIO,IAAJ,CAASL,UAAT,EAAqBM,YAArB,EAXN;AAAA,SAAST,GAAT;AAAA;AAAA;AAAA;AAAA,eAFJ;AAAA,KADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA8BD,CAjCD;;GAAMP,K;;KAAAA,K;AAmCNA,KAAK,CAACiB,eAAN,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACTrB,MAAM,CAACsB,KAAP,CAAavB,IAAb,oBADS;;AAAA;AAAA;AAAA;AACtBO,YAAAA,KADsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAMA,eAAeF,KAAf","sourcesContent":["// index.js\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport imageUrlBuilder from '@sanity/image-url'\nimport groq from 'groq'\nimport client from '../client'\n\nfunction urlFor (source) {\n  return imageUrlBuilder(client).image(source)\n}\n\nconst Index = (props) => {\n  const { posts = [] } = props\n  const [open, setOpen] = useState(false)\n  return (\n    <div>\n      <h1>PLaying with next</h1>\n\n      <button onClick={ev => setOpen(!open)}>click me, I am a useState hook</button>\n      {open &&\n        <div>\n        Looks liek I can do normal stuff here..\n        </div>}\n\n      {posts.map(\n        ({ _id, title = '', slug = '', _updatedAt = '', mainImage }) =>\n          slug && (\n            <li key={_id}>\n\n              <img\n                src={urlFor(mainImage)\n                  .width(200)\n                  .url()}\n              />\n              <Link href='/post/[slug]' as={`/post/${slug.current}`}>\n                <a>{title}</a>\n\n              </Link>{' '}\n                ({new Date(_updatedAt).toDateString()})\n            </li>\n          )\n      )}\n    </div>\n  )\n}\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n})\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}