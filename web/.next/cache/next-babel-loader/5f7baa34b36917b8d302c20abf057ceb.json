{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/coryschadt/Documents/cory-analog/web/pages/index.js\";\n// index.js\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport imageUrlBuilder from '@sanity/image-url';\nimport groq from 'groq';\nimport client from '../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Index = props => {\n  const {\n    posts = []\n  } = props;\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PLaying with next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: ev => setOpen(!open),\n      children: \"click me, I am a useState hook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), open && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Looks like I can do normal stuff here..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), posts.map(({\n      _id,\n      title = '',\n      slug = '',\n      _updatedAt = '',\n      mainImage\n    }) => slug && /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: urlFor(mainImage).width(200).url()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        href: \"/post/[slug]\",\n        as: `/post/${slug.current}`,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this), ' ', \"(\", new Date(_updatedAt).toDateString(), \")\"]\n    }, _id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n});\n\nexport default Index;","map":{"version":3,"sources":["/Users/coryschadt/Documents/cory-analog/web/pages/index.js"],"names":["useState","Link","imageUrlBuilder","groq","client","urlFor","source","image","Index","props","posts","open","setOpen","ev","map","_id","title","slug","_updatedAt","mainImage","width","url","current","Date","toDateString","getInitialProps","fetch"],"mappings":";;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,MAAME,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM;AAAEC,IAAAA,KAAK,GAAG;AAAV,MAAiBD,KAAvB;AACA,QAAM;AAAA,OAACE,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAC,KAAD,CAAhC;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAQ,MAAA,OAAO,EAAEa,EAAE,IAAID,OAAO,CAAC,CAACD,IAAF,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAIGA,IAAI,iBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eASQ;AAAA;AAAA;AAAA;AAAA,YATR,eAUQ;AAAA;AAAA;AAAA;AAAA,YAVR,eAWQ;AAAA;AAAA;AAAA;AAAA,YAXR,EAYGD,KAAK,CAACI,GAAN,CACC,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,KAAK,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG,EAA1B;AAA8BC,MAAAA,UAAU,GAAG,EAA3C;AAA+CC,MAAAA;AAA/C,KAAD,KACEF,IAAI,iBACF;AAAA,8BAEE;AACE,QAAA,GAAG,EAAEZ,MAAM,CAACc,SAAD,CAAN,CACFC,KADE,CACI,GADJ,EAEFC,GAFE;AADP;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,cAAX;AAA0B,QAAA,EAAE,EAAG,SAAQJ,IAAI,CAACK,OAAQ,EAApD;AAAA,+BACE;AAAA,oBAAIN;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,EAUU,GAVV,OAWM,IAAIO,IAAJ,CAASL,UAAT,EAAqBM,YAArB,EAXN;AAAA,OAAST,GAAT;AAAA;AAAA;AAAA;AAAA,YAHL,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD,CApCD;;AAsCAP,KAAK,CAACiB,eAAN,GAAwB,aAAa;AACnCf,EAAAA,KAAK,EAAE,MAAMN,MAAM,CAACsB,KAAP,CAAavB,IAAK;AACjC;AACA,KAFe;AADsB,CAAb,CAAxB;;AAMA,eAAeK,KAAf","sourcesContent":["// index.js\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport imageUrlBuilder from '@sanity/image-url'\nimport groq from 'groq'\nimport client from '../client'\n\nfunction urlFor (source) {\n  return imageUrlBuilder(client).image(source)\n}\n\nconst Index = (props) => {\n  const { posts = [] } = props\n  const [open, setOpen] = useState(false)\n  return (\n    <div>\n      <h1>PLaying with next</h1>\n\n      <button onClick={ev => setOpen(!open)}>click me, I am a useState hook</button>\n      {open &&\n        <div>\n        Looks like I can do normal stuff here..\n        </div>}\n\n            <br />\n            <br />\n            <br />\n      {posts.map(\n        ({ _id, title = '', slug = '', _updatedAt = '', mainImage }) =>\n          slug && (\n            <li key={_id}>\n\n              <img\n                src={urlFor(mainImage)\n                  .width(200)\n                  .url()}\n              />\n              <Link href='/post/[slug]' as={`/post/${slug.current}`}>\n                <a>{title}</a>\n\n              </Link>{' '}\n                ({new Date(_updatedAt).toDateString()})\n            </li>\n          )\n      )}\n    </div>\n  )\n}\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n})\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}