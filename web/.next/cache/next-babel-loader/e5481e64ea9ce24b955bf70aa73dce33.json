{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/coryschadt/Documents/cory-analog/web/pages/index.js\";\n// index.js\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport imageUrlBuilder from '@sanity/image-url';\nimport groq from 'groq';\nimport client from '../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Index = ({\n  photos = []\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: photos.map(({\n      _id,\n      title = '',\n      slug = '',\n      _updatedAt = '',\n      mainImage,\n      camera,\n      lens,\n      film\n    }) => slug && /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [camera, \": \", lens]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: camera\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: urlFor(mainImage).width(200).url()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        href: \"/photo/[slug]\",\n        as: `/photo/${slug.current}`,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 15\n      }, this), ' ', \"(\", new Date(_updatedAt).toDateString(), \")\"]\n    }, _id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nIndex.getInitialProps = async () => ({\n  photos: await client.fetch(groq`\n      *[_type == \"photo\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n});\n\nexport default Index;","map":{"version":3,"sources":["/Users/coryschadt/Documents/cory-analog/web/pages/index.js"],"names":["useState","Link","imageUrlBuilder","groq","client","urlFor","source","image","Index","photos","map","_id","title","slug","_updatedAt","mainImage","camera","lens","film","width","url","current","Date","toDateString","getInitialProps","fetch"],"mappings":";;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,MAAME,KAAK,GAAG,CAAC;AAAEC,EAAAA,MAAM,GAAG;AAAX,CAAD,KAAqB;AACjC,sBACE;AAAA,cACGA,MAAM,CAACC,GAAP,CACC,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,KAAK,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG,EAA1B;AAA8BC,MAAAA,UAAU,GAAG,EAA3C;AAA+CC,MAAAA,SAA/C;AAA0DC,MAAAA,MAA1D;AAAkEC,MAAAA,IAAlE;AAAwEC,MAAAA;AAAxE,KAAD,KACEL,IAAI,iBACF;AAAA,8BACE;AAAA,mBAAKG,MAAL,QAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AACE,QAAA,GAAG,EAAEX,MAAM,CAACU,SAAD,CAAN,CACFI,KADE,CACI,GADJ,EAEFC,GAFE;AADP;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,eAAX;AAA2B,QAAA,EAAE,EAAG,UAASP,IAAI,CAACQ,OAAQ,EAAtD;AAAA,+BACE;AAAA,oBAAIT;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF,EAWU,GAXV,OAYM,IAAIU,IAAJ,CAASR,UAAT,EAAqBS,YAArB,EAZN;AAAA,OAASZ,GAAT;AAAA;AAAA;AAAA;AAAA,YAHL;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAxBD;;AA0BAH,KAAK,CAACgB,eAAN,GAAwB,aAAa;AACnCf,EAAAA,MAAM,EAAE,MAAML,MAAM,CAACqB,KAAP,CAAatB,IAAK;AAClC;AACA,KAFgB;AADqB,CAAb,CAAxB;;AAMA,eAAeK,KAAf","sourcesContent":["// index.js\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport imageUrlBuilder from '@sanity/image-url'\nimport groq from 'groq'\nimport client from '../client'\n\nfunction urlFor (source) {\n  return imageUrlBuilder(client).image(source)\n}\n\nconst Index = ({ photos = [] }) => {\n  return (\n    <div>\n      {photos.map(\n        ({ _id, title = '', slug = '', _updatedAt = '', mainImage, camera, lens, film }) =>\n          slug && (\n            <li key={_id}>\n              <h1>{camera}: {lens}</h1>\n              <h1>{camera}</h1>\n              <img\n                src={urlFor(mainImage)\n                  .width(200)\n                  .url()}\n              />\n              <Link href='/photo/[slug]' as={`/photo/${slug.current}`}>\n                <a>{title}</a>\n\n              </Link>{' '}\n                ({new Date(_updatedAt).toDateString()})\n            </li>\n          )\n      )}\n    </div>\n  )\n}\n\nIndex.getInitialProps = async () => ({\n  photos: await client.fetch(groq`\n      *[_type == \"photo\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n})\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}